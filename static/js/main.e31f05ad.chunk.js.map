{"version":3,"sources":["atoms.tsx","components/CreateCategory.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","categoryState","atom","key","default","TO_DO","newCategoryState","JSON","parse","localStorage","getItem","toDoState","toDoSelector","selector","get","toDos","category","filter","toDo","categoriesSelector","Object","entries","newCategory","map","CreateCategory","useRecoilState","setNewCategory","useForm","register","handleSubmit","setValue","onSubmit","indexOf","prev","newCategories","setItem","stringify","required","placeholder","CreateToDo","setToDos","useSetRecoilState","useRecoilValue","oldToDos","newToDos","text","id","Date","now","ToDo","categories","onClick","event","name","currentTarget","targetIndex","findIndex","newToDo","slice","item","ToDoList","setCategory","console","log","value","onInput","multiple","GlobalStyle","createGlobalStyle","props","theme","bgColor","textColor","App","ReactDOM","render","StrictMode","accentColor","cardBgColor","document","getElementById"],"mappings":"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","file":"static/js/main.e31f05ad.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport enum Categories {\r\n  \"TO_DO\" = \"TO DO\",\r\n  \"DOING\" = \"DOING\",\r\n  \"DONE\" = \"DONE\",\r\n}\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: Categories;\r\n}\r\n\r\nexport const categoryState = atom<Categories>({\r\n  key: \"category\",\r\n  default: Categories.TO_DO,\r\n});\r\n\r\nexport const newCategoryState = atom<string[]>({\r\n  key: \"newCategory\",\r\n  default: JSON.parse(localStorage.getItem('categories') || \"[]\") as any,\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: JSON.parse(localStorage.getItem('toDo') || \"[]\") as any,\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n\r\n\r\nexport const categoriesSelector = selector({\r\n  key: \"categorySelector\",\r\n  get: ({ get }) => {\r\n    const category = Object.entries(Categories);\r\n    const newCategory = get(newCategoryState);\r\n\r\n    return [...category.map(category => category[1]), ...newCategory];\r\n  },\r\n});","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\r\nimport { newCategoryState } from \"../atoms\";\r\n\r\n\r\ninterface IForm {\r\n    category: string;\r\n}\r\n\r\n\r\nfunction CreateCategory() {\r\n    const [newCategory, setNewCategory] = useRecoilState(newCategoryState);\r\n    const { register, handleSubmit, setValue } = useForm<IForm>();\r\n\r\n    const onValid = ({ category }: IForm) => {\r\n        setValue(\"category\", \"\");\r\n        if (newCategory.indexOf(category) >= 0) return;\r\n        setNewCategory(prev => {\r\n            const newCategories = [...prev, category]\r\n            localStorage.setItem(\"categories\", JSON.stringify(newCategories));\r\n            return newCategories\r\n        });\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onValid)}>\r\n            <input\r\n                {...register(\"category\", {\r\n                    required: \"Please wirte a new category\",\r\n                })}\r\n                placeholder=\"Write a new category\"\r\n            />\r\n            <button>Add</button>\r\n        </form>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default CreateCategory;","import { useForm } from \"react-hook-form\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { categoryState, toDoState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nfunction CreateToDo() {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    setToDos((oldToDos) => {\r\n      const newToDos = [\r\n        { text: toDo, id: Date.now(), category },\r\n        ...oldToDos,\r\n      ]\r\n\r\n      localStorage.setItem(\"toDo\", JSON.stringify(newToDos));\r\n      return newToDos;\r\n\r\n    });\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit(handleValid)}>\r\n      <input\r\n        {...register(\"toDo\", {\r\n          required: \"Please write a To Do\",\r\n        })}\r\n        placeholder=\"Write a to do\"\r\n      />\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import React from \"react\";\r\nimport { useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { Categories, categoriesSelector, IToDo, toDoState } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  const categories = useRecoilValue(categoriesSelector);\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: name as any };\r\n\r\n      const newToDos = [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n\r\n      localStorage.setItem(\"toDo\", JSON.stringify(newToDos));\r\n      return newToDos;\r\n    });\r\n  };\r\n  return (\r\n    <li>\r\n      <span>{text}</span>\r\n      {categories.map(item =>\r\n        category !== item && (\r\n          <button name={item} key={item} onClick={onClick}>\r\n            {item}\r\n          </button>\r\n        )\r\n      )}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { Categories, categoriesSelector, categoryState, toDoSelector } from \"../atoms\";\r\nimport CreateCategory from \"./CreateCategory\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoList() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  const categories = useRecoilValue(categoriesSelector);\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const onInput = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    setCategory(event.currentTarget.value as any);\r\n  };\r\n  console.log(toDos);\r\n  return (\r\n    <div>\r\n      <h1>To Dos</h1>\r\n      <hr />\r\n      <CreateCategory />\r\n      <hr />\r\n      <select value={category} onInput={onInput} multiple={false}>\r\n        {categories.map(category => <option key={category} value={category}>{category}</option>)}\r\n      </select>\r\n      <CreateToDo />\r\n      {toDos?.map((toDo) => (\r\n        <ToDo key={toDo.id} {...toDo} />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ToDoList;\r\n","import { createGlobalStyle } from \"styled-components\";\r\nimport ToDoList from \"./components/ToDoList\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\r\nhtml, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, menu, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmain, menu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n  padding: 0;\r\n  border: 0;\r\n  font-size: 100%;\r\n  font: inherit;\r\n  vertical-align: baseline;\r\n}\r\n/* HTML5 display-role reset for older browsers */\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, main, menu, nav, section {\r\n  display: block;\r\n}\r\n/* HTML5 hidden-attribute fix for newer browsers */\r\n*[hidden] {\r\n    display: none;\r\n}\r\nbody {\r\n  line-height: 1;\r\n}\r\nmenu, ol, ul {\r\n  list-style: none;\r\n}\r\nblockquote, q {\r\n  quotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n  content: '';\r\n  content: none;\r\n}\r\ntable {\r\n  border-collapse: collapse;\r\n  border-spacing: 0;\r\n}\r\n* {\r\n  box-sizing: border-box;\r\n}\r\nbody {\r\n  font-weight: 300;\r\n  font-family: 'Source Sans Pro', sans-serif;\r\n  background-color:${(props) => props.theme.bgColor};\r\n  color:${(props) => props.theme.textColor};\r\n  line-height: 1.2;\r\n}\r\na {\r\n  text-decoration:none;\r\n  color:inherit;\r\n}\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <ToDoList />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { RecoilRoot } from \"recoil\";\r\nimport { ThemeProvider } from \"styled-components\";\r\nimport App from \"./App\";\r\nimport { darkTheme } from \"./theme\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <RecoilRoot>\r\n      <ThemeProvider theme={darkTheme}>\r\n        <App />\r\n      </ThemeProvider>\r\n    </RecoilRoot>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: \"#2f3640\",\r\n  textColor: \"white\",\r\n  accentColor: \"#9c88ff\",\r\n  cardBgColor: \"transparent\",\r\n};\r\n"],"sourceRoot":""}